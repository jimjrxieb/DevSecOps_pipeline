# These are the steps I took to create and configure each AWS EC2 instances from scratch
# Used steps to configured my Terraform Main.tf for my End to End CI/CD pipeline using Jenkins and Github Actions.
# 1. Jenkins 2. Github Actions Runner 3. Sonarqube 4. Nexus 

################################################################################################
######################################## JENKINS ###############################################

Instance Type: t2.large
Port: 8080

1. Update packages:> sudo apt update

2. ### Install OpenJDK 17 JRE Headless
    sudo apt install openjdk-17-jre-headless -y

3. ### Install Jenkins
    # create script for Jenkins Dependencies
>>> [vi Jenkins.sh] 
>>> [copy and paste []]
[ sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
 echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
 sudo apt-get update ]
>>> [sudo chmod +x Jenkins.sh]
>>> [./Jenkins.sh]
# Install Jenkins
>>> sudo apt-get install jenkins -y

4. ### Install Docker
    > sudo apt install docker.io -y
    >> sudo chmod 666 /var/run/docker.sock
    >>> sudo apt-get update 

5. ### Install Trivy 
>>> [ Create ( vi trivy.sh )script ]
>>> [copy&paste] 
    sudo apt-get install wget apt-transport-https gnupg lsb-release
    wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
    echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
    sudo apt-get update
    sudo apt-get install trivy
>>> [sudo chmod +x trivy.sh]
>>> [./trivy.sh]

6. ### Install Kubectl
> curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
>> chmod +x ./kubectl
>>> sudo mv ./kubectl /usr/local/bin
>>>> kubectl --version 

7. ### Install Prometheus Node exporter
> wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz
>> tar -xvf node_exporter-1.8.2.linux-amd64.tar.gz
<< rm -rf node_exporter-1.8.2.linux-amd64.tar.gz
>>> cd node_exporter-1.8.2.linux-amd64.tar.gz
>>>> run in background [./node_exporter &]
>>>> access [--Jenkins-server-IP--]:9100


# Check if Docker, Maven, Trivy, OWASP, and kubectl are installed:
    docker --version , kubectl version --client , mvn --version , trivy --version


# Update and upgrade packages:
sudo apt update && sudo apt upgrade -y

8. Get initial Jenkins admin password:
cat /var/jenkins_home/secrets/initialAdminPassword

9. ### Plugins 
1.SONARQUBE scanner 2.17.2
2.MAVEN integration 3.23
> pipeline maven integration 1421.v
3.config file provider 973.vb
4.KUBERNATES 4285v
> 6.10.0-240
>> 189.v90a
>>> 1.12.1
5.DOCKER 1.6.2
> 580.vc0
6.Eclipse Temurin installer 1.5
7.Pipeline: Stage View 2.34
8. OWASP Dependency-Check 5.4.0
9. Prometheus metrics 2.5.1

###################################################################################################
#################################### Github Runner ################################################

t2.large
> sudo apt update
1. ### Create new runner for Github action in Setting under Actions > runners
    > mkdir actions-runner && cd actions-runner
    >> curl -o actions-runner-linux-x64-2.320.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.320.0/actions-runner-linux-x64-2.320.0.tar.gz
    >>> tar -xvf ./actions-runner-linux-x64-2.320.0.tar.gz
2 ### Connect to GitHub account
    > ./config.sh --url https://github.com/<-given in setup-> --token:<given in setup> 
    >> runner name: dev-runner
    >> labels: [press enter]"self-hosted"
    >> [press enter]
    >>> runner server : [ ./run.sh ]

*** OPEN SEPERATE MOBAXTERM SSH TAB ***

3. ### Install docker
    > sudo apt install docker.io -y
    >> sudo chmod 666 /var/run/docker.sock
    >>> sudo apt update 

4. ### Install Sonarqube
    > docker run -d --name SonarQube -p 9000:9000 sonarqube:lts-community
{-- ADD to GitHub pipeline--
- name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
}
*create file (if not present)> sonar-project.properties [] 
[sonar.projectKey=Boardgame
sonar.projectName=Boardgame
sonar.java.binaries=.]

5. ### Install maven
    sudo apt install maven -y

6. ### Install Trivy
>>>[ Create script ] 
>>>[vi trivy.sh]
>>> copy and paste []

[ sudo apt-get install wget apt-transport-https gnupg lsb-release
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list 
sudo apt-get update 
sudo apt-get install trivy ]

>>>[sudo chmod +x trivy.sh]
>>>[./trivy.sh]
 
{--GitHub pipeline after actions/upload-artifact@v4--
- name: Trivy Image Scan
      run: |
        trivy image --format table -o trivy-image-report.html linksrobot/gh_boardgame:latest
}
 ** check with YAMLlint.com
{--GitHub actions after docker build--
- name: Trivy Image Scan
      run: |
        trivy image --format table -o trivy-image-report.html linksrobot/gh_boardgame:latest


##############################################################################################
######################################## SONARQUBE ###########################################

Instance Type: t2.medium
Configure Server
1. sudo apt update
2. ### Install Docker:
    sudo apt install docker.io -y
    sudo chmod 666 /var/run/docker.sock    
    sudo apt update

3. Run SonarQube Docker image:
    sudo docker run -d --name SonarQube -p 9000:9000 sonarqube:lts-community

### Configure Website
    1. Access SonarQube:
     Open your browser and go to http://<server-IP>:9000
        User:     admin
        Password: admin
    2. Create Token:
    Navigate to Admin > Security > Users > global > token
    3. Generate a token and copy it
    Create Jenkins Credentials for the token and save it as sonar-token
    Create Github Actions Secrect for the token and save it as SONAR_TOKEN

### SonarQube Server Installation on Jenkins
1. Add SonarQube Server:
    Go to Manage Jenkins > Configure System
    Scroll down to the SonarQube servers section and click Add SonarQube
    Enter the following details:
    Name: sonar-server
    Server URL: http://<instance_public_ip>:9000
    Server authentication token: sonar-token

### Creating webhook: http://localhost:8080/sonarqube-webhook/

######################################################################################################
######################################### NEXUS ######################################################

Instance Type: t2.medium
Configure Server
1. ### Install Docker:
    sudo apt install docker.io -y
    sudo apt update

2. Run Nexus Docker image:
sudo docker run -d --name nexus -p 8081:8081 sonatype/nexus3

# To get initial password
1. Enter the Nexus container:
    sudo docker ps
    sudo docker exec -it <container ID> /bin/bash

2. Once inside the container > Navigate to the Nexus directory:
    cd sonatype-work/nexus3

3. Retrieve the admin password:
    cat admin.password

### Configure Application
1. Access Nexus: >>Open your browser and go to http://<instance_public_ip>:8081
Credentials for login:
    User: admin
    Password: (output from the previous command)
2. Add to pom.xml on your application being used for pipeline:
XML

<distributionManagement>
    <repository>
        <id>maven-releases</id>
        <url>(maven-release copyURL)</url>
    </repository>
    <snapshotRepository>
        <id>maven-snapshots</id>
        <url>(maven-snapshots copyURL)</url>
    </snapshotRepository>
</distributionManagement>

Jenkins Configuration
1. Managed Files:
    Go to Manage Jenkins > Managed files.
    Click on Add a new Config.
    Select Global Maven settings.
    Set the ID to maven-settings.
2. Add the following XML configuration:
XML

<settings>
  <servers>
    <server>
      <id>maven-releases</id>
      <username>admin</username>
      <password>(nexuspass)</password>
    </server>
    <server>
      <id>maven-snapshots</id>
      <username>admin</username>
      <password>(nexuspass)</password>
    </server>
  </servers>
</settings>

Deployment Policy:
    Ensure the deployment policy is set to allow redeploy.

