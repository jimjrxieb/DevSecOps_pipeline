# These are my steps need to create each EC2 instances from scratch for my End to End CI/CD pipeline using jenkins. 
# Kubernetes , SonarQube and Jenkins server  

################################ JENKINS ################################

Instance Type: t2.large
Port: 8080

1. Update packages:> sudo apt update

2. ### Install OpenJDK 17 JRE Headless
    sudo apt install openjdk-17-jre-headless -y

3. ### Install Jenkins
    # Download Jenkins GPG key
   sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
   https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

    # Add Jenkins repository to package manager sources
    echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
    /etc/apt/sources.list.d/jenkins.list > /dev/null

    # Update package manager repositories
    sudo apt-get update

    sudo apt-get install jenkins -y

4. ### Install Docker
    sudo apt install docker.io -y
    sudo chmod 666 /var/run/docker.sock
    sudo apt-get update 

5. ### Install Trivy
    sudo apt-get install wget apt-transport-https gnupg lsb-release
    wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
    echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
    sudo apt-get update
    sudo apt-get install trivy

6. ### Install Kubectl
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
kubectl version --short --client

# Check if Docker, Maven, Trivy, OWASP, and kubectl are installed:
    docker --version , kubectl version --client , mvn --version , trivy --version


# Update and upgrade packages:
sudo apt update && sudo apt upgrade -y

8. Get initial Jenkins admin password:
cat /var/jenkins_home/secrets/initialAdminPassword

################################ SONARQUBE ################################

Instance Type: t2.medium
Configure Server
1. sudo apt update
2. ### Install Docker:
    sudo apt install docker.io -y
    sudo chmod 666 /var/run/docker.sock    
    sudo apt update

3. Run SonarQube Docker image:
    sudo docker run -d --name SonarQube -p 9000:9000 sonarqube:lts-community

### Configure Website
    1. Access SonarQube:
     Open your browser and go to http://<elastic IP>:9000
        User: admin
        Password: admin
    2. Create Token:
    Navigate to Admin > Security > Users > global > token
    3. Generate a token and copy it
    Save the token locally as sonar-token

### SonarQube Server Installation on Jenkins
1. Add SonarQube Server:
    Go to Manage Jenkins > Configure System
    Scroll down to the SonarQube servers section and click Add SonarQube
    Enter the following details:
    Name: sonar-server
    Server URL: http://<instance_public_ip>:9000
    Server authentication token: sonar-token

### Creating webhook: http://localhost:8080/sonarqube-webhook/

################################ NEXUS ################################

Instance Type: t2.medium
Configure Server
1. ### Install Docker:
    sudo apt install docker.io -y
    sudo apt update

2. Run Nexus Docker image:
sudo docker run -d --name nexus -p 8081:8081 sonatype/nexus3

# To get initial password
1. Enter the Nexus container:
    sudo docker ps
    sudo docker exec -it <container ID> /bin/bash

2. Once inside the container > Navigate to the Nexus directory:
    cd sonatype-work/nexus3

3. Retrieve the admin password:
    cat admin.password

### Configure Application
1. Access Nexus: >>Open your browser and go to http://<instance_public_ip>:8081
Credentials for login:
    User: admin
    Password: (output from the previous command)
2. Add to pom.xml in your application being used for pipeline:
XML

<distributionManagement>
    <repository>
        <id>maven-releases</id>
        <url>(maven-release copyURL)</url>
    </repository>
    <snapshotRepository>
        <id>maven-snapshots</id>
        <url>(maven-snapshots copyURL)</url>
    </snapshotRepository>
</distributionManagement>

Jenkins Configuration
1. Managed Files:
    Go to Manage Jenkins > Managed files.
    Click on Add a new Config.
    Select Global Maven settings.
    Set the ID to maven-settings.
2. Add the following XML configuration:
XML

<settings>
  <servers>
    <server>
      <id>maven-releases</id>
      <username>admin</username>
      <password>(nexuspass)</password>
    </server>
    <server>
      <id>maven-snapshots</id>
      <username>admin</username>
      <password>(nexuspass)</password>
    </server>
  </servers>
</settings>

Deployment Policy:
    Ensure the deployment policy is set to allow redeploy.

############################## Kubernetes ########################################

1. Update System Packages [On Master & Worker Node]
    sudo apt-get update

2. Install Docker[On Master & Worker Node]
    sudo apt install docker.io -y
    sudo chmod 666 /var/run/docker.sock

3. Install Required Dependencies for Kubernetes[On Master & Worker Node]
    sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
    sudo mkdir -p -m 755 /etc/apt/keyrings

4. Add Kubernetes Repository and GPG Key[On Master & Worker Node]
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

5. Update Package List[On Master & Worker Node]
    sudo apt update

6. Install Kubernetes Components[On Master & Worker Node]
    sudo apt install -y kubeadm, kubelet, kubectl

# Manually ssh into all 3 servers


7. Initialize Kubernetes Master Node [On MasterNode]
    sudo kubeadm init --pod-network-cidr=10.244.0.0/16

    # if ports already used: sudo kubeadm reset > y

    [On Workernodes]
    kubeadm join <>:6443 --token <>  --discovery-token-ca-cert-hash <>

8. Configure Kubernetes Cluster [On MasterNode]
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config

9. Deploy Networking Solution (Calico) [On MasterNode]
    kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

10. Deploy Ingress Controller (NGINX) [On MasterNode]
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.49.0/deploy/static/provider/baremetal/deploy.yaml

11. Update and Upgrade Packages
    sudo apt upgrade && sudo apt upgrade -y

[Master Node]
1. Create Service account: vi svc.yaml
2. Create namespace: kubectl create ns <webapps> > kubectl apply -f svc.yaml
3. Create Role: vi role.yaml > kubectl apply -f role.yaml
4. Assign role to service account: vi bind.yaml > kubectl apply -f bind.yaml
5. Create Kube token for Jenkins: vi sec.yaml > kubectl apply -f sec.yaml
    #To get token: kubectl describe secret mysecretname -n webapps
    token:<>
6. Grab Kube server endpoint
     cd ~/.kube > ls > cat config
    grab server location: https://172.31.83.64:6443
    grab cluster name: Kubernetes
    grab namespace: webapps
7. Create "deployment-service.yaml" on application running through pipeline > copy and adjust 
8. Check App on kube
    #Go to CONSOLE OUTPUT:
    grab worker ip:
    grab port(s):
    search

